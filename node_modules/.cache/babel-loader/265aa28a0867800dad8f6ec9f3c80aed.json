{"ast":null,"code":"import { reactLocalStorage } from \"reactjs-localstorage\";\n\nconst {\n  default: AuthHandler\n} = require(\"./AuthHandler\");\n\nconst {\n  default: Axios\n} = require(\"axios\");\n\nconst {\n  default: Config\n} = require(\"./Config\");\n\nclass APIHandler {\n  async checkLogin() {\n    if (AuthHandler.checkTokenExpiry()) {\n      try {\n        var response = await Axios.post(Config.refreshApiUrl, {\n          refresh: AuthHandler.getRefreshToken()\n        });\n        reactLocalStorage.set(\"token\", response.data.access);\n      } catch (error) {\n        console.log(error); //Not Using Valid Token for Refresh then Logout the User\n\n        AuthHandler.logoutUser();\n        window.location = \"/\";\n      }\n    }\n  }\n\n  async saveCompanyData(name, license_no, address, contact_no, email, description) {\n    await this.checkLogin(); //Wait Until Token Get Updated\n\n    var response = await Axios.post(Config.companyApiUrl, {\n      name: name,\n      license_no: license_no,\n      address: address,\n      contact_no: contact_no,\n      email: email,\n      description: description\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async fetchAllCompany() {\n    await this.checkLogin();\n    var response = await Axios.get(Config.companyApiUrl, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async fetchHomePage() {\n    await this.checkLogin();\n    var response = await Axios.get(Config.homeApiUrl, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async fetchAllCustomerRequest() {\n    await this.checkLogin();\n    var response = await Axios.get(Config.customerRequestApiUrl, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async fetchAllCompanyAccount() {\n    await this.checkLogin();\n    var response = await Axios.get(Config.companyAccountApiUrl, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async fetchCompanyDetails(id) {\n    await this.checkLogin();\n    var response = await Axios.get(Config.companyApiUrl + \"\" + id + \"/\", {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async fetchMedicineByName(name) {\n    if (name !== \"\") {\n      await this.checkLogin();\n      var response = await Axios.get(Config.medicineNameApiUrl + \"\" + name, {\n        headers: {\n          Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n        }\n      });\n      return response;\n    } else {\n      return {\n        data: []\n      };\n    }\n  }\n\n  async editCompanyData(name, license_no, address, contact_no, email, description, id) {\n    await this.checkLogin(); //Wait Until Token Get Updated\n\n    var response = await Axios.put(Config.companyApiUrl + \"\" + id + \"/\", {\n      name: name,\n      license_no: license_no,\n      address: address,\n      contact_no: contact_no,\n      email: email,\n      description: description\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async saveCompanyBankData(bank_account_no, ifsc_no, company_id) {\n    await this.checkLogin(); //Wait Until Token Get Updated\n\n    var response = await Axios.post(Config.companyBankApiUrl, {\n      bank_account_no: bank_account_no,\n      ifsc_no: ifsc_no,\n      company_id: company_id\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async saveCustomerRequestData(name, phone, medicine_details, prescription) {\n    await this.checkLogin(); //Wait Until Token Get Updated\n\n    var formData = new FormData();\n    formData.append(\"customer_name\", name);\n    formData.append(\"phone\", phone);\n    formData.append(\"medicine_details\", medicine_details);\n    formData.append(\"prescription\", prescription);\n    var response = await Axios.post(Config.customerRequestApiUrl, formData, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken(),\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    return response;\n  }\n\n  async updateCustomerRequest(customer_id, name, phone, medicine_details) {\n    await this.checkLogin(); //Wait Until Token Get Updated\n\n    var response = await Axios.put(Config.customerRequestApiUrl + \"\" + customer_id + \"/\", {\n      customer_name: name,\n      phone: phone,\n      medicine_details: medicine_details,\n      status: 1\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async fetchCompanyBankDetails(id) {\n    await this.checkLogin();\n    var response = await Axios.get(Config.companyBankApiUrl + \"\" + id + \"/\", {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async generateBill(name, address, phone, medicineDetails) {\n    await this.checkLogin();\n    var response = await Axios.post(Config.generateBillApiUrl, {\n      name: name,\n      address: address,\n      contact: phone,\n      medicine_details: medicineDetails\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async editCompanyBankData(bank_account_no, ifsc_no, company_id, id) {\n    await this.checkLogin(); //Wait Until Token Get Updated\n\n    var response = await Axios.put(Config.companyBankApiUrl + \"\" + id + \"/\", {\n      bank_account_no: bank_account_no,\n      ifsc_no: ifsc_no,\n      company_id: company_id\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async fetchCompanyOnly() {\n    await this.checkLogin();\n    var response = await Axios.get(Config.companyOnly, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async saveMedicineData(name, medical_typ, buy_price, sell_price, c_gst, s_gst, batch_no, shelf_no, expire_date, mfg_date, company_id, description, in_stock_total, qty_in_strip, medicinedetails) {\n    await this.checkLogin(); //Wait Until Token Get Updated\n\n    var response = await Axios.post(Config.medicineApiUrl, {\n      name: name,\n      medical_typ: medical_typ,\n      buy_price: buy_price,\n      sell_price: sell_price,\n      c_gst: c_gst,\n      s_gst: s_gst,\n      batch_no: batch_no,\n      shelf_no: shelf_no,\n      expire_date: expire_date,\n      mfg_date: mfg_date,\n      company_id: company_id,\n      description: description,\n      in_stock_total: in_stock_total,\n      qty_in_strip: qty_in_strip,\n      medicine_details: medicinedetails\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async fetchAllMedicine() {\n    await this.checkLogin();\n    var response = await Axios.get(Config.medicineApiUrl, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async editMedicineData(name, medical_typ, buy_price, sell_price, c_gst, s_gst, batch_no, shelf_no, expire_date, mfg_date, company_id, description, in_stock_total, qty_in_strip, medicinedetails, id) {\n    await this.checkLogin(); //Wait Until Token Get Updated\n\n    var response = await Axios.put(Config.medicineApiUrl + \"\" + id + \"/\", {\n      name: name,\n      medical_typ: medical_typ,\n      buy_price: buy_price,\n      sell_price: sell_price,\n      c_gst: c_gst,\n      s_gst: s_gst,\n      batch_no: batch_no,\n      shelf_no: shelf_no,\n      expire_date: expire_date,\n      mfg_date: mfg_date,\n      company_id: company_id,\n      description: description,\n      in_stock_total: in_stock_total,\n      qty_in_strip: qty_in_strip,\n      medicine_details: medicinedetails\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async saveCompanyTransactionData(company_id, transaction_type, transaction_amt, transaction_date, payment_mode) {\n    await this.checkLogin(); //Wait Until Token Get Updated\n\n    var response = await Axios.post(Config.companyAccountApiUrl, {\n      company_id: company_id,\n      transaction_type: transaction_type,\n      transaction_amt: transaction_amt,\n      transaction_date: transaction_date,\n      payment_mode: payment_mode\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async fetchEmployee() {\n    await this.checkLogin();\n    var response = await Axios.get(Config.employeeApiURL, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async saveEmployeeData(name, joining_date, phone, address) {\n    await this.checkLogin(); //Wait Until Token Get Updated\n\n    var response = await Axios.post(Config.employeeApiURL, {\n      name: name,\n      joining_date: joining_date,\n      phone: phone,\n      address: address\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async fetchEmployeeById(id) {\n    await this.checkLogin();\n    var response = await Axios.get(Config.employeeApiURL + \"\" + id + \"/\", {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async editEmployeeData(name, joining_date, phone, address, id) {\n    await this.checkLogin(); //Wait Until Token Get Updated\n\n    var response = await Axios.put(Config.employeeApiURL + \"\" + id + \"/\", {\n      name: name,\n      joining_date: joining_date,\n      phone: phone,\n      address: address\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async fetchSalaryEmployee(id) {\n    await this.checkLogin();\n    var response = await Axios.get(Config.employeeSalaryByIdApiUrl + \"\" + id, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async fetchBankEmployee(id) {\n    await this.checkLogin();\n    var response = await Axios.get(Config.employeeBankApiUrlBYID + \"\" + id, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async AddEmployeeSalaryData(salary_date, salary_amount, employee_id) {\n    await this.checkLogin(); //Wait Until Token Get Updated\n\n    var response = await Axios.post(Config.employeeSalaryApiUrl, {\n      salary_date: salary_date,\n      salary_amount: salary_amount,\n      employee_id: employee_id\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n  async AddEmployeeBankData(bank_account_no, ifsc_no, employee_id) {\n    await this.checkLogin(); //Wait Until Token Get Updated\n\n    var response = await Axios.post(Config.employeeBankApiUrl, {\n      bank_account_no: bank_account_no,\n      ifsc_no: ifsc_no,\n      employee_id: employee_id\n    }, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken()\n      }\n    });\n    return response;\n  }\n\n}\n\nexport default APIHandler;","map":{"version":3,"sources":["D:/react/DjangoMedicalStoreFrontEndInReactJS/src/utils/APIHandler.js"],"names":["reactLocalStorage","default","AuthHandler","require","Axios","Config","APIHandler","checkLogin","checkTokenExpiry","response","post","refreshApiUrl","refresh","getRefreshToken","set","data","access","error","console","log","logoutUser","window","location","saveCompanyData","name","license_no","address","contact_no","email","description","companyApiUrl","headers","Authorization","getLoginToken","fetchAllCompany","get","fetchHomePage","homeApiUrl","fetchAllCustomerRequest","customerRequestApiUrl","fetchAllCompanyAccount","companyAccountApiUrl","fetchCompanyDetails","id","fetchMedicineByName","medicineNameApiUrl","editCompanyData","put","saveCompanyBankData","bank_account_no","ifsc_no","company_id","companyBankApiUrl","saveCustomerRequestData","phone","medicine_details","prescription","formData","FormData","append","updateCustomerRequest","customer_id","customer_name","status","fetchCompanyBankDetails","generateBill","medicineDetails","generateBillApiUrl","contact","editCompanyBankData","fetchCompanyOnly","companyOnly","saveMedicineData","medical_typ","buy_price","sell_price","c_gst","s_gst","batch_no","shelf_no","expire_date","mfg_date","in_stock_total","qty_in_strip","medicinedetails","medicineApiUrl","fetchAllMedicine","editMedicineData","saveCompanyTransactionData","transaction_type","transaction_amt","transaction_date","payment_mode","fetchEmployee","employeeApiURL","saveEmployeeData","joining_date","fetchEmployeeById","editEmployeeData","fetchSalaryEmployee","employeeSalaryByIdApiUrl","fetchBankEmployee","employeeBankApiUrlBYID","AddEmployeeSalaryData","salary_date","salary_amount","employee_id","employeeSalaryApiUrl","AddEmployeeBankData","employeeBankApiUrl"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sBAAlC;;AAEA,MAAM;AAAEC,EAAAA,OAAO,EAAEC;AAAX,IAA2BC,OAAO,CAAC,eAAD,CAAxC;;AACA,MAAM;AAAEF,EAAAA,OAAO,EAAEG;AAAX,IAAqBD,OAAO,CAAC,OAAD,CAAlC;;AACA,MAAM;AAAEF,EAAAA,OAAO,EAAEI;AAAX,IAAsBF,OAAO,CAAC,UAAD,CAAnC;;AAEA,MAAMG,UAAN,CAAiB;AACf,QAAMC,UAAN,GAAmB;AACjB,QAAIL,WAAW,CAACM,gBAAZ,EAAJ,EAAoC;AAClC,UAAI;AACF,YAAIC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CAAWL,MAAM,CAACM,aAAlB,EAAiC;AACpDC,UAAAA,OAAO,EAAEV,WAAW,CAACW,eAAZ;AAD2C,SAAjC,CAArB;AAIAb,QAAAA,iBAAiB,CAACc,GAAlB,CAAsB,OAAtB,EAA+BL,QAAQ,CAACM,IAAT,CAAcC,MAA7C;AACD,OAND,CAME,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADc,CAGd;;AACAf,QAAAA,WAAW,CAACkB,UAAZ;AACAC,QAAAA,MAAM,CAACC,QAAP,GAAkB,GAAlB;AACD;AACF;AACF;;AAED,QAAMC,eAAN,CACEC,IADF,EAEEC,UAFF,EAGEC,OAHF,EAIEC,UAJF,EAKEC,KALF,EAMEC,WANF,EAOE;AACA,UAAM,KAAKtB,UAAL,EAAN,CADA,CAEA;;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CACnBL,MAAM,CAACyB,aADY,EAEnB;AACEN,MAAAA,IAAI,EAAEA,IADR;AAEEC,MAAAA,UAAU,EAAEA,UAFd;AAGEC,MAAAA,OAAO,EAAEA,OAHX;AAIEC,MAAAA,UAAU,EAAEA,UAJd;AAKEC,MAAAA,KAAK,EAAEA,KALT;AAMEC,MAAAA,WAAW,EAAEA;AANf,KAFmB,EAUnB;AAAEE,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAAX,KAVmB,CAArB;AAaA,WAAOxB,QAAP;AACD;;AAED,QAAMyB,eAAN,GAAwB;AACtB,UAAM,KAAK3B,UAAL,EAAN;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC+B,GAAN,CAAU9B,MAAM,CAACyB,aAAjB,EAAgC;AACnDC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAD0C,KAAhC,CAArB;AAIA,WAAOxB,QAAP;AACD;;AAED,QAAM2B,aAAN,GAAsB;AACpB,UAAM,KAAK7B,UAAL,EAAN;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC+B,GAAN,CAAU9B,MAAM,CAACgC,UAAjB,EAA6B;AAChDN,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AADuC,KAA7B,CAArB;AAIA,WAAOxB,QAAP;AACD;;AAED,QAAM6B,uBAAN,GAAgC;AAC9B,UAAM,KAAK/B,UAAL,EAAN;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC+B,GAAN,CAAU9B,MAAM,CAACkC,qBAAjB,EAAwC;AAC3DR,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AADkD,KAAxC,CAArB;AAIA,WAAOxB,QAAP;AACD;;AAED,QAAM+B,sBAAN,GAA+B;AAC7B,UAAM,KAAKjC,UAAL,EAAN;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC+B,GAAN,CAAU9B,MAAM,CAACoC,oBAAjB,EAAuC;AAC1DV,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AADiD,KAAvC,CAArB;AAIA,WAAOxB,QAAP;AACD;;AAED,QAAMiC,mBAAN,CAA0BC,EAA1B,EAA8B;AAC5B,UAAM,KAAKpC,UAAL,EAAN;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC+B,GAAN,CAAU9B,MAAM,CAACyB,aAAP,GAAuB,EAAvB,GAA4Ba,EAA5B,GAAiC,GAA3C,EAAgD;AACnEZ,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAD0D,KAAhD,CAArB;AAIA,WAAOxB,QAAP;AACD;;AAED,QAAMmC,mBAAN,CAA0BpB,IAA1B,EAAgC;AAC9B,QAAIA,IAAI,KAAK,EAAb,EAAiB;AACf,YAAM,KAAKjB,UAAL,EAAN;AAEA,UAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC+B,GAAN,CAAU9B,MAAM,CAACwC,kBAAP,GAA4B,EAA5B,GAAiCrB,IAA3C,EAAiD;AACpEO,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAD2D,OAAjD,CAArB;AAIA,aAAOxB,QAAP;AACD,KARD,MAQO;AACL,aAAO;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAAP;AACD;AACF;;AAED,QAAM+B,eAAN,CACEtB,IADF,EAEEC,UAFF,EAGEC,OAHF,EAIEC,UAJF,EAKEC,KALF,EAMEC,WANF,EAOEc,EAPF,EAQE;AACA,UAAM,KAAKpC,UAAL,EAAN,CADA,CAEA;;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC2C,GAAN,CACnB1C,MAAM,CAACyB,aAAP,GAAuB,EAAvB,GAA4Ba,EAA5B,GAAiC,GADd,EAEnB;AACEnB,MAAAA,IAAI,EAAEA,IADR;AAEEC,MAAAA,UAAU,EAAEA,UAFd;AAGEC,MAAAA,OAAO,EAAEA,OAHX;AAIEC,MAAAA,UAAU,EAAEA,UAJd;AAKEC,MAAAA,KAAK,EAAEA,KALT;AAMEC,MAAAA,WAAW,EAAEA;AANf,KAFmB,EAUnB;AAAEE,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAAX,KAVmB,CAArB;AAaA,WAAOxB,QAAP;AACD;;AAED,QAAMuC,mBAAN,CAA0BC,eAA1B,EAA2CC,OAA3C,EAAoDC,UAApD,EAAgE;AAC9D,UAAM,KAAK5C,UAAL,EAAN,CAD8D,CAE9D;;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CACnBL,MAAM,CAAC+C,iBADY,EAEnB;AACEH,MAAAA,eAAe,EAAEA,eADnB;AAEEC,MAAAA,OAAO,EAAEA,OAFX;AAGEC,MAAAA,UAAU,EAAEA;AAHd,KAFmB,EAOnB;AAAEpB,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAAX,KAPmB,CAArB;AAUA,WAAOxB,QAAP;AACD;;AAED,QAAM4C,uBAAN,CAA8B7B,IAA9B,EAAoC8B,KAApC,EAA2CC,gBAA3C,EAA6DC,YAA7D,EAA2E;AACzE,UAAM,KAAKjD,UAAL,EAAN,CADyE,CAEzE;;AACA,QAAIkD,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,eAAhB,EAAiCnC,IAAjC;AACAiC,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBL,KAAzB;AACAG,IAAAA,QAAQ,CAACE,MAAT,CAAgB,kBAAhB,EAAoCJ,gBAApC;AACAE,IAAAA,QAAQ,CAACE,MAAT,CAAgB,cAAhB,EAAgCH,YAAhC;AAEA,QAAI/C,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CAAWL,MAAM,CAACkC,qBAAlB,EAAyCkB,QAAzC,EAAmD;AACtE1B,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ,EADpB;AAEP,wBAAgB;AAFT;AAD6D,KAAnD,CAArB;AAOA,WAAOxB,QAAP;AACD;;AAED,QAAMmD,qBAAN,CAA4BC,WAA5B,EAAyCrC,IAAzC,EAA+C8B,KAA/C,EAAsDC,gBAAtD,EAAwE;AACtE,UAAM,KAAKhD,UAAL,EAAN,CADsE,CAEtE;;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC2C,GAAN,CACnB1C,MAAM,CAACkC,qBAAP,GAA+B,EAA/B,GAAoCsB,WAApC,GAAkD,GAD/B,EAEnB;AACEC,MAAAA,aAAa,EAAEtC,IADjB;AAEE8B,MAAAA,KAAK,EAAEA,KAFT;AAGEC,MAAAA,gBAAgB,EAAEA,gBAHpB;AAIEQ,MAAAA,MAAM,EAAE;AAJV,KAFmB,EAQnB;AAAEhC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAAX,KARmB,CAArB;AAUA,WAAOxB,QAAP;AACD;;AAED,QAAMuD,uBAAN,CAA8BrB,EAA9B,EAAkC;AAChC,UAAM,KAAKpC,UAAL,EAAN;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC+B,GAAN,CAAU9B,MAAM,CAAC+C,iBAAP,GAA2B,EAA3B,GAAgCT,EAAhC,GAAqC,GAA/C,EAAoD;AACvEZ,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAD8D,KAApD,CAArB;AAIA,WAAOxB,QAAP;AACD;;AAED,QAAMwD,YAAN,CAAmBzC,IAAnB,EAAyBE,OAAzB,EAAkC4B,KAAlC,EAAyCY,eAAzC,EAA0D;AACxD,UAAM,KAAK3D,UAAL,EAAN;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CACnBL,MAAM,CAAC8D,kBADY,EAEnB;AACE3C,MAAAA,IAAI,EAAEA,IADR;AAEEE,MAAAA,OAAO,EAAEA,OAFX;AAGE0C,MAAAA,OAAO,EAAEd,KAHX;AAIEC,MAAAA,gBAAgB,EAAEW;AAJpB,KAFmB,EAQnB;AACEnC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AADX,KARmB,CAArB;AAaA,WAAOxB,QAAP;AACD;;AAED,QAAM4D,mBAAN,CAA0BpB,eAA1B,EAA2CC,OAA3C,EAAoDC,UAApD,EAAgER,EAAhE,EAAoE;AAClE,UAAM,KAAKpC,UAAL,EAAN,CADkE,CAElE;;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC2C,GAAN,CACnB1C,MAAM,CAAC+C,iBAAP,GAA2B,EAA3B,GAAgCT,EAAhC,GAAqC,GADlB,EAEnB;AACEM,MAAAA,eAAe,EAAEA,eADnB;AAEEC,MAAAA,OAAO,EAAEA,OAFX;AAGEC,MAAAA,UAAU,EAAEA;AAHd,KAFmB,EAOnB;AAAEpB,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAAX,KAPmB,CAArB;AAUA,WAAOxB,QAAP;AACD;;AAED,QAAM6D,gBAAN,GAAyB;AACvB,UAAM,KAAK/D,UAAL,EAAN;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC+B,GAAN,CAAU9B,MAAM,CAACkE,WAAjB,EAA8B;AACjDxC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AADwC,KAA9B,CAArB;AAIA,WAAOxB,QAAP;AACD;;AAED,QAAM+D,gBAAN,CACEhD,IADF,EAEEiD,WAFF,EAGEC,SAHF,EAIEC,UAJF,EAKEC,KALF,EAMEC,KANF,EAOEC,QAPF,EAQEC,QARF,EASEC,WATF,EAUEC,QAVF,EAWE9B,UAXF,EAYEtB,WAZF,EAaEqD,cAbF,EAcEC,YAdF,EAeEC,eAfF,EAgBE;AACA,UAAM,KAAK7E,UAAL,EAAN,CADA,CAEA;;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CACnBL,MAAM,CAACgF,cADY,EAEnB;AACE7D,MAAAA,IAAI,EAAEA,IADR;AAEEiD,MAAAA,WAAW,EAAEA,WAFf;AAGEC,MAAAA,SAAS,EAAEA,SAHb;AAIEC,MAAAA,UAAU,EAAEA,UAJd;AAKEC,MAAAA,KAAK,EAAEA,KALT;AAMEC,MAAAA,KAAK,EAAEA,KANT;AAOEC,MAAAA,QAAQ,EAAEA,QAPZ;AAQEC,MAAAA,QAAQ,EAAEA,QARZ;AASEC,MAAAA,WAAW,EAAEA,WATf;AAUEC,MAAAA,QAAQ,EAAEA,QAVZ;AAWE9B,MAAAA,UAAU,EAAEA,UAXd;AAYEtB,MAAAA,WAAW,EAAEA,WAZf;AAaEqD,MAAAA,cAAc,EAAEA,cAblB;AAcEC,MAAAA,YAAY,EAAEA,YAdhB;AAeE5B,MAAAA,gBAAgB,EAAE6B;AAfpB,KAFmB,EAmBnB;AAAErD,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAAX,KAnBmB,CAArB;AAsBA,WAAOxB,QAAP;AACD;;AAED,QAAM6E,gBAAN,GAAyB;AACvB,UAAM,KAAK/E,UAAL,EAAN;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC+B,GAAN,CAAU9B,MAAM,CAACgF,cAAjB,EAAiC;AACpDtD,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAD2C,KAAjC,CAArB;AAIA,WAAOxB,QAAP;AACD;;AAED,QAAM8E,gBAAN,CACE/D,IADF,EAEEiD,WAFF,EAGEC,SAHF,EAIEC,UAJF,EAKEC,KALF,EAMEC,KANF,EAOEC,QAPF,EAQEC,QARF,EASEC,WATF,EAUEC,QAVF,EAWE9B,UAXF,EAYEtB,WAZF,EAaEqD,cAbF,EAcEC,YAdF,EAeEC,eAfF,EAgBEzC,EAhBF,EAiBE;AACA,UAAM,KAAKpC,UAAL,EAAN,CADA,CAEA;;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC2C,GAAN,CACnB1C,MAAM,CAACgF,cAAP,GAAwB,EAAxB,GAA6B1C,EAA7B,GAAkC,GADf,EAEnB;AACEnB,MAAAA,IAAI,EAAEA,IADR;AAEEiD,MAAAA,WAAW,EAAEA,WAFf;AAGEC,MAAAA,SAAS,EAAEA,SAHb;AAIEC,MAAAA,UAAU,EAAEA,UAJd;AAKEC,MAAAA,KAAK,EAAEA,KALT;AAMEC,MAAAA,KAAK,EAAEA,KANT;AAOEC,MAAAA,QAAQ,EAAEA,QAPZ;AAQEC,MAAAA,QAAQ,EAAEA,QARZ;AASEC,MAAAA,WAAW,EAAEA,WATf;AAUEC,MAAAA,QAAQ,EAAEA,QAVZ;AAWE9B,MAAAA,UAAU,EAAEA,UAXd;AAYEtB,MAAAA,WAAW,EAAEA,WAZf;AAaEqD,MAAAA,cAAc,EAAEA,cAblB;AAcEC,MAAAA,YAAY,EAAEA,YAdhB;AAeE5B,MAAAA,gBAAgB,EAAE6B;AAfpB,KAFmB,EAmBnB;AAAErD,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAAX,KAnBmB,CAArB;AAsBA,WAAOxB,QAAP;AACD;;AAED,QAAM+E,0BAAN,CACErC,UADF,EAEEsC,gBAFF,EAGEC,eAHF,EAIEC,gBAJF,EAKEC,YALF,EAME;AACA,UAAM,KAAKrF,UAAL,EAAN,CADA,CAEA;;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CACnBL,MAAM,CAACoC,oBADY,EAEnB;AACEU,MAAAA,UAAU,EAAEA,UADd;AAEEsC,MAAAA,gBAAgB,EAAEA,gBAFpB;AAGEC,MAAAA,eAAe,EAAEA,eAHnB;AAIEC,MAAAA,gBAAgB,EAAEA,gBAJpB;AAKEC,MAAAA,YAAY,EAAEA;AALhB,KAFmB,EASnB;AAAE7D,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAAX,KATmB,CAArB;AAYA,WAAOxB,QAAP;AACD;;AAED,QAAMoF,aAAN,GAAsB;AACpB,UAAM,KAAKtF,UAAL,EAAN;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC+B,GAAN,CAAU9B,MAAM,CAACyF,cAAjB,EAAiC;AACpD/D,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAD2C,KAAjC,CAArB;AAIA,WAAOxB,QAAP;AACD;;AAED,QAAMsF,gBAAN,CAAuBvE,IAAvB,EAA6BwE,YAA7B,EAA2C1C,KAA3C,EAAkD5B,OAAlD,EAA2D;AACzD,UAAM,KAAKnB,UAAL,EAAN,CADyD,CAEzD;;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CACnBL,MAAM,CAACyF,cADY,EAEnB;AACEtE,MAAAA,IAAI,EAAEA,IADR;AAEEwE,MAAAA,YAAY,EAAEA,YAFhB;AAGE1C,MAAAA,KAAK,EAAEA,KAHT;AAIE5B,MAAAA,OAAO,EAAEA;AAJX,KAFmB,EAQnB;AAAEK,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAAX,KARmB,CAArB;AAWA,WAAOxB,QAAP;AACD;;AAED,QAAMwF,iBAAN,CAAwBtD,EAAxB,EAA4B;AAC1B,UAAM,KAAKpC,UAAL,EAAN;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC+B,GAAN,CAAU9B,MAAM,CAACyF,cAAP,GAAwB,EAAxB,GAA6BnD,EAA7B,GAAkC,GAA5C,EAAiD;AACpEZ,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAD2D,KAAjD,CAArB;AAIA,WAAOxB,QAAP;AACD;;AAED,QAAMyF,gBAAN,CAAuB1E,IAAvB,EAA6BwE,YAA7B,EAA2C1C,KAA3C,EAAkD5B,OAAlD,EAA2DiB,EAA3D,EAA+D;AAC7D,UAAM,KAAKpC,UAAL,EAAN,CAD6D,CAE7D;;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC2C,GAAN,CACnB1C,MAAM,CAACyF,cAAP,GAAwB,EAAxB,GAA6BnD,EAA7B,GAAkC,GADf,EAEnB;AACEnB,MAAAA,IAAI,EAAEA,IADR;AAEEwE,MAAAA,YAAY,EAAEA,YAFhB;AAGE1C,MAAAA,KAAK,EAAEA,KAHT;AAIE5B,MAAAA,OAAO,EAAEA;AAJX,KAFmB,EAQnB;AAAEK,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAAX,KARmB,CAArB;AAWA,WAAOxB,QAAP;AACD;;AAED,QAAM0F,mBAAN,CAA0BxD,EAA1B,EAA8B;AAC5B,UAAM,KAAKpC,UAAL,EAAN;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC+B,GAAN,CAAU9B,MAAM,CAAC+F,wBAAP,GAAkC,EAAlC,GAAuCzD,EAAjD,EAAqD;AACxEZ,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAD+D,KAArD,CAArB;AAIA,WAAOxB,QAAP;AACD;;AAED,QAAM4F,iBAAN,CAAwB1D,EAAxB,EAA4B;AAC1B,UAAM,KAAKpC,UAAL,EAAN;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAAC+B,GAAN,CAAU9B,MAAM,CAACiG,sBAAP,GAAgC,EAAhC,GAAqC3D,EAA/C,EAAmD;AACtEZ,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAD6D,KAAnD,CAArB;AAIA,WAAOxB,QAAP;AACD;;AAED,QAAM8F,qBAAN,CAA4BC,WAA5B,EAAyCC,aAAzC,EAAwDC,WAAxD,EAAqE;AACnE,UAAM,KAAKnG,UAAL,EAAN,CADmE,CAEnE;;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CACnBL,MAAM,CAACsG,oBADY,EAEnB;AACEH,MAAAA,WAAW,EAAEA,WADf;AAEEC,MAAAA,aAAa,EAAEA,aAFjB;AAGEC,MAAAA,WAAW,EAAEA;AAHf,KAFmB,EAOnB;AAAE3E,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAAX,KAPmB,CAArB;AAUA,WAAOxB,QAAP;AACD;;AAED,QAAMmG,mBAAN,CAA0B3D,eAA1B,EAA2CC,OAA3C,EAAoDwD,WAApD,EAAiE;AAC/D,UAAM,KAAKnG,UAAL,EAAN,CAD+D,CAE/D;;AAEA,QAAIE,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CACnBL,MAAM,CAACwG,kBADY,EAEnB;AACE5D,MAAAA,eAAe,EAAEA,eADnB;AAEEC,MAAAA,OAAO,EAAEA,OAFX;AAGEwD,MAAAA,WAAW,EAAEA;AAHf,KAFmB,EAOnB;AAAE3E,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAY9B,WAAW,CAAC+B,aAAZ;AAA7B;AAAX,KAPmB,CAArB;AAUA,WAAOxB,QAAP;AACD;;AAjec;;AAoejB,eAAeH,UAAf","sourcesContent":["import { reactLocalStorage } from \"reactjs-localstorage\";\n\nconst { default: AuthHandler } = require(\"./AuthHandler\");\nconst { default: Axios } = require(\"axios\");\nconst { default: Config } = require(\"./Config\");\n\nclass APIHandler {\n  async checkLogin() {\n    if (AuthHandler.checkTokenExpiry()) {\n      try {\n        var response = await Axios.post(Config.refreshApiUrl, {\n          refresh: AuthHandler.getRefreshToken(),\n        });\n\n        reactLocalStorage.set(\"token\", response.data.access);\n      } catch (error) {\n        console.log(error);\n\n        //Not Using Valid Token for Refresh then Logout the User\n        AuthHandler.logoutUser();\n        window.location = \"/\";\n      }\n    }\n  }\n\n  async saveCompanyData(\n    name,\n    license_no,\n    address,\n    contact_no,\n    email,\n    description\n  ) {\n    await this.checkLogin();\n    //Wait Until Token Get Updated\n\n    var response = await Axios.post(\n      Config.companyApiUrl,\n      {\n        name: name,\n        license_no: license_no,\n        address: address,\n        contact_no: contact_no,\n        email: email,\n        description: description,\n      },\n      { headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() } }\n    );\n\n    return response;\n  }\n\n  async fetchAllCompany() {\n    await this.checkLogin();\n\n    var response = await Axios.get(Config.companyApiUrl, {\n      headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n    });\n\n    return response;\n  }\n\n  async fetchHomePage() {\n    await this.checkLogin();\n\n    var response = await Axios.get(Config.homeApiUrl, {\n      headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n    });\n\n    return response;\n  }\n\n  async fetchAllCustomerRequest() {\n    await this.checkLogin();\n\n    var response = await Axios.get(Config.customerRequestApiUrl, {\n      headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n    });\n\n    return response;\n  }\n\n  async fetchAllCompanyAccount() {\n    await this.checkLogin();\n\n    var response = await Axios.get(Config.companyAccountApiUrl, {\n      headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n    });\n\n    return response;\n  }\n\n  async fetchCompanyDetails(id) {\n    await this.checkLogin();\n\n    var response = await Axios.get(Config.companyApiUrl + \"\" + id + \"/\", {\n      headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n    });\n\n    return response;\n  }\n\n  async fetchMedicineByName(name) {\n    if (name !== \"\") {\n      await this.checkLogin();\n\n      var response = await Axios.get(Config.medicineNameApiUrl + \"\" + name, {\n        headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n      });\n\n      return response;\n    } else {\n      return { data: [] };\n    }\n  }\n\n  async editCompanyData(\n    name,\n    license_no,\n    address,\n    contact_no,\n    email,\n    description,\n    id\n  ) {\n    await this.checkLogin();\n    //Wait Until Token Get Updated\n\n    var response = await Axios.put(\n      Config.companyApiUrl + \"\" + id + \"/\",\n      {\n        name: name,\n        license_no: license_no,\n        address: address,\n        contact_no: contact_no,\n        email: email,\n        description: description,\n      },\n      { headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() } }\n    );\n\n    return response;\n  }\n\n  async saveCompanyBankData(bank_account_no, ifsc_no, company_id) {\n    await this.checkLogin();\n    //Wait Until Token Get Updated\n\n    var response = await Axios.post(\n      Config.companyBankApiUrl,\n      {\n        bank_account_no: bank_account_no,\n        ifsc_no: ifsc_no,\n        company_id: company_id,\n      },\n      { headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() } }\n    );\n\n    return response;\n  }\n\n  async saveCustomerRequestData(name, phone, medicine_details, prescription) {\n    await this.checkLogin();\n    //Wait Until Token Get Updated\n    var formData = new FormData();\n    formData.append(\"customer_name\", name);\n    formData.append(\"phone\", phone);\n    formData.append(\"medicine_details\", medicine_details);\n    formData.append(\"prescription\", prescription);\n\n    var response = await Axios.post(Config.customerRequestApiUrl, formData, {\n      headers: {\n        Authorization: \"Bearer \" + AuthHandler.getLoginToken(),\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    });\n\n    return response;\n  }\n\n  async updateCustomerRequest(customer_id, name, phone, medicine_details) {\n    await this.checkLogin();\n    //Wait Until Token Get Updated\n\n    var response = await Axios.put(\n      Config.customerRequestApiUrl + \"\" + customer_id + \"/\",\n      {\n        customer_name: name,\n        phone: phone,\n        medicine_details: medicine_details,\n        status: 1,\n      },\n      { headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() } }\n    );\n    return response;\n  }\n\n  async fetchCompanyBankDetails(id) {\n    await this.checkLogin();\n\n    var response = await Axios.get(Config.companyBankApiUrl + \"\" + id + \"/\", {\n      headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n    });\n\n    return response;\n  }\n\n  async generateBill(name, address, phone, medicineDetails) {\n    await this.checkLogin();\n\n    var response = await Axios.post(\n      Config.generateBillApiUrl,\n      {\n        name: name,\n        address: address,\n        contact: phone,\n        medicine_details: medicineDetails,\n      },\n      {\n        headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n      }\n    );\n\n    return response;\n  }\n\n  async editCompanyBankData(bank_account_no, ifsc_no, company_id, id) {\n    await this.checkLogin();\n    //Wait Until Token Get Updated\n\n    var response = await Axios.put(\n      Config.companyBankApiUrl + \"\" + id + \"/\",\n      {\n        bank_account_no: bank_account_no,\n        ifsc_no: ifsc_no,\n        company_id: company_id,\n      },\n      { headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() } }\n    );\n\n    return response;\n  }\n\n  async fetchCompanyOnly() {\n    await this.checkLogin();\n\n    var response = await Axios.get(Config.companyOnly, {\n      headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n    });\n\n    return response;\n  }\n\n  async saveMedicineData(\n    name,\n    medical_typ,\n    buy_price,\n    sell_price,\n    c_gst,\n    s_gst,\n    batch_no,\n    shelf_no,\n    expire_date,\n    mfg_date,\n    company_id,\n    description,\n    in_stock_total,\n    qty_in_strip,\n    medicinedetails\n  ) {\n    await this.checkLogin();\n    //Wait Until Token Get Updated\n\n    var response = await Axios.post(\n      Config.medicineApiUrl,\n      {\n        name: name,\n        medical_typ: medical_typ,\n        buy_price: buy_price,\n        sell_price: sell_price,\n        c_gst: c_gst,\n        s_gst: s_gst,\n        batch_no: batch_no,\n        shelf_no: shelf_no,\n        expire_date: expire_date,\n        mfg_date: mfg_date,\n        company_id: company_id,\n        description: description,\n        in_stock_total: in_stock_total,\n        qty_in_strip: qty_in_strip,\n        medicine_details: medicinedetails,\n      },\n      { headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() } }\n    );\n\n    return response;\n  }\n\n  async fetchAllMedicine() {\n    await this.checkLogin();\n\n    var response = await Axios.get(Config.medicineApiUrl, {\n      headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n    });\n\n    return response;\n  }\n\n  async editMedicineData(\n    name,\n    medical_typ,\n    buy_price,\n    sell_price,\n    c_gst,\n    s_gst,\n    batch_no,\n    shelf_no,\n    expire_date,\n    mfg_date,\n    company_id,\n    description,\n    in_stock_total,\n    qty_in_strip,\n    medicinedetails,\n    id\n  ) {\n    await this.checkLogin();\n    //Wait Until Token Get Updated\n\n    var response = await Axios.put(\n      Config.medicineApiUrl + \"\" + id + \"/\",\n      {\n        name: name,\n        medical_typ: medical_typ,\n        buy_price: buy_price,\n        sell_price: sell_price,\n        c_gst: c_gst,\n        s_gst: s_gst,\n        batch_no: batch_no,\n        shelf_no: shelf_no,\n        expire_date: expire_date,\n        mfg_date: mfg_date,\n        company_id: company_id,\n        description: description,\n        in_stock_total: in_stock_total,\n        qty_in_strip: qty_in_strip,\n        medicine_details: medicinedetails,\n      },\n      { headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() } }\n    );\n\n    return response;\n  }\n\n  async saveCompanyTransactionData(\n    company_id,\n    transaction_type,\n    transaction_amt,\n    transaction_date,\n    payment_mode\n  ) {\n    await this.checkLogin();\n    //Wait Until Token Get Updated\n\n    var response = await Axios.post(\n      Config.companyAccountApiUrl,\n      {\n        company_id: company_id,\n        transaction_type: transaction_type,\n        transaction_amt: transaction_amt,\n        transaction_date: transaction_date,\n        payment_mode: payment_mode,\n      },\n      { headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() } }\n    );\n\n    return response;\n  }\n\n  async fetchEmployee() {\n    await this.checkLogin();\n\n    var response = await Axios.get(Config.employeeApiURL, {\n      headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n    });\n\n    return response;\n  }\n\n  async saveEmployeeData(name, joining_date, phone, address) {\n    await this.checkLogin();\n    //Wait Until Token Get Updated\n\n    var response = await Axios.post(\n      Config.employeeApiURL,\n      {\n        name: name,\n        joining_date: joining_date,\n        phone: phone,\n        address: address,\n      },\n      { headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() } }\n    );\n\n    return response;\n  }\n\n  async fetchEmployeeById(id) {\n    await this.checkLogin();\n\n    var response = await Axios.get(Config.employeeApiURL + \"\" + id + \"/\", {\n      headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n    });\n\n    return response;\n  }\n\n  async editEmployeeData(name, joining_date, phone, address, id) {\n    await this.checkLogin();\n    //Wait Until Token Get Updated\n\n    var response = await Axios.put(\n      Config.employeeApiURL + \"\" + id + \"/\",\n      {\n        name: name,\n        joining_date: joining_date,\n        phone: phone,\n        address: address,\n      },\n      { headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() } }\n    );\n\n    return response;\n  }\n\n  async fetchSalaryEmployee(id) {\n    await this.checkLogin();\n\n    var response = await Axios.get(Config.employeeSalaryByIdApiUrl + \"\" + id, {\n      headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n    });\n\n    return response;\n  }\n\n  async fetchBankEmployee(id) {\n    await this.checkLogin();\n\n    var response = await Axios.get(Config.employeeBankApiUrlBYID + \"\" + id, {\n      headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() },\n    });\n\n    return response;\n  }\n\n  async AddEmployeeSalaryData(salary_date, salary_amount, employee_id) {\n    await this.checkLogin();\n    //Wait Until Token Get Updated\n\n    var response = await Axios.post(\n      Config.employeeSalaryApiUrl,\n      {\n        salary_date: salary_date,\n        salary_amount: salary_amount,\n        employee_id: employee_id,\n      },\n      { headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() } }\n    );\n\n    return response;\n  }\n\n  async AddEmployeeBankData(bank_account_no, ifsc_no, employee_id) {\n    await this.checkLogin();\n    //Wait Until Token Get Updated\n\n    var response = await Axios.post(\n      Config.employeeBankApiUrl,\n      {\n        bank_account_no: bank_account_no,\n        ifsc_no: ifsc_no,\n        employee_id: employee_id,\n      },\n      { headers: { Authorization: \"Bearer \" + AuthHandler.getLoginToken() } }\n    );\n\n    return response;\n  }\n}\n\nexport default APIHandler;\n"]},"metadata":{},"sourceType":"module"}