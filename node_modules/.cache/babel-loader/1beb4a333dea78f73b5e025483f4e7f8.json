{"ast":null,"code":"import axios from \"axios\";\nimport Config from \"./Config\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\n\nclass AuthHandler {\n  static login(username, password, callback) {\n    axios.post(Config.loginUrl, {\n      username: username,\n      password: password\n    }).then(function (response) {\n      if (response.status === 200) {\n        reactLocalStorage.set(\"token\", response.data.access);\n        reactLocalStorage.set(\"refresh\", response.data.refresh);\n        callback({\n          error: false,\n          message: \"Login Successfull...\"\n        });\n      }\n    }).catch(function (error) {\n      callback({\n        error: true,\n        message: \"Error During Login Invalid Login Details..\"\n      });\n    });\n  }\n\n  static loggedIn() {\n    if (reactLocalStorage.get(\"token\") && reactLocalStorage.get(\"refresh\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  static getLoginToken() {\n    return reactLocalStorage.get(\"token\");\n  }\n\n  static getRefreshToken() {\n    return reactLocalStorage.get(\"refresh\");\n  }\n\n  static logoutUser() {\n    reactLocalStorage.remove(\"token\");\n    reactLocalStorage.remove(\"refresh\");\n  }\n\n  static checkTokenExpiry() {\n    var expire = false;\n    var token = this.getLoginToken();\n    var tokenArray = token.split(\".\");\n    var jwt = JSON.parse(atob(tokenArray[1]));\n\n    if (jwt && jwt.exp && Number.isFinite(jwt.exp)) {\n      expire = jwt.exp * 1000;\n    } else {\n      expire = false;\n    }\n\n    if (!expire) {\n      return false;\n    }\n\n    return Date.now() > expire;\n  }\n\n}\n\nexport default AuthHandler;","map":{"version":3,"sources":["D:/react/DjangoMedicalStoreFrontEndInReactJS/src/utils/AuthHandler.js"],"names":["axios","Config","reactLocalStorage","AuthHandler","login","username","password","callback","post","loginUrl","then","response","status","set","data","access","refresh","error","message","catch","loggedIn","get","getLoginToken","getRefreshToken","logoutUser","remove","checkTokenExpiry","expire","token","tokenArray","split","jwt","JSON","parse","atob","exp","Number","isFinite","Date","now"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,iBAAT,QAAkC,sBAAlC;;AAEA,MAAMC,WAAN,CAAkB;AAChB,SAAOC,KAAP,CAAaC,QAAb,EAAuBC,QAAvB,EAAiCC,QAAjC,EAA2C;AACzCP,IAAAA,KAAK,CACFQ,IADH,CACQP,MAAM,CAACQ,QADf,EACyB;AAAEJ,MAAAA,QAAQ,EAAEA,QAAZ;AAAsBC,MAAAA,QAAQ,EAAEA;AAAhC,KADzB,EAEGI,IAFH,CAEQ,UAAUC,QAAV,EAAoB;AACxB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BV,QAAAA,iBAAiB,CAACW,GAAlB,CAAsB,OAAtB,EAA+BF,QAAQ,CAACG,IAAT,CAAcC,MAA7C;AACAb,QAAAA,iBAAiB,CAACW,GAAlB,CAAsB,SAAtB,EAAiCF,QAAQ,CAACG,IAAT,CAAcE,OAA/C;AACAT,QAAAA,QAAQ,CAAC;AAAEU,UAAAA,KAAK,EAAE,KAAT;AAAgBC,UAAAA,OAAO,EAAE;AAAzB,SAAD,CAAR;AACD;AACF,KARH,EASGC,KATH,CASS,UAAUF,KAAV,EAAiB;AACtBV,MAAAA,QAAQ,CAAC;AACPU,QAAAA,KAAK,EAAE,IADA;AAEPC,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID,KAdH;AAeD;;AAED,SAAOE,QAAP,GAAkB;AAChB,QAAIlB,iBAAiB,CAACmB,GAAlB,CAAsB,OAAtB,KAAkCnB,iBAAiB,CAACmB,GAAlB,CAAsB,SAAtB,CAAtC,EAAwE;AACtE,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF;;AAED,SAAOC,aAAP,GAAuB;AACrB,WAAOpB,iBAAiB,CAACmB,GAAlB,CAAsB,OAAtB,CAAP;AACD;;AAED,SAAOE,eAAP,GAAyB;AACvB,WAAOrB,iBAAiB,CAACmB,GAAlB,CAAsB,SAAtB,CAAP;AACD;;AAED,SAAOG,UAAP,GAAoB;AAClBtB,IAAAA,iBAAiB,CAACuB,MAAlB,CAAyB,OAAzB;AACAvB,IAAAA,iBAAiB,CAACuB,MAAlB,CAAyB,SAAzB;AACD;;AAED,SAAOC,gBAAP,GAA0B;AACxB,QAAIC,MAAM,GAAG,KAAb;AACA,QAAIC,KAAK,GAAG,KAAKN,aAAL,EAAZ;AACA,QAAIO,UAAU,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,CAAjB;AACA,QAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACL,UAAU,CAAC,CAAD,CAAX,CAAf,CAAV;;AACA,QAAIE,GAAG,IAAIA,GAAG,CAACI,GAAX,IAAkBC,MAAM,CAACC,QAAP,CAAgBN,GAAG,CAACI,GAApB,CAAtB,EAAgD;AAC9CR,MAAAA,MAAM,GAAGI,GAAG,CAACI,GAAJ,GAAU,IAAnB;AACD,KAFD,MAEO;AACLR,MAAAA,MAAM,GAAG,KAAT;AACD;;AAED,QAAI,CAACA,MAAL,EAAa;AACX,aAAO,KAAP;AACD;;AAED,WAAOW,IAAI,CAACC,GAAL,KAAaZ,MAApB;AACD;;AAxDe;;AA2DlB,eAAexB,WAAf","sourcesContent":["import axios from \"axios\";\nimport Config from \"./Config\";\nimport { reactLocalStorage } from \"reactjs-localstorage\";\n\nclass AuthHandler {\n  static login(username, password, callback) {\n    axios\n      .post(Config.loginUrl, { username: username, password: password })\n      .then(function (response) {\n        if (response.status === 200) {\n          reactLocalStorage.set(\"token\", response.data.access);\n          reactLocalStorage.set(\"refresh\", response.data.refresh);\n          callback({ error: false, message: \"Login Successfull...\" });\n        }\n      })\n      .catch(function (error) {\n        callback({\n          error: true,\n          message: \"Error During Login Invalid Login Details..\",\n        });\n      });\n  }\n\n  static loggedIn() {\n    if (reactLocalStorage.get(\"token\") && reactLocalStorage.get(\"refresh\")) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  static getLoginToken() {\n    return reactLocalStorage.get(\"token\");\n  }\n\n  static getRefreshToken() {\n    return reactLocalStorage.get(\"refresh\");\n  }\n\n  static logoutUser() {\n    reactLocalStorage.remove(\"token\");\n    reactLocalStorage.remove(\"refresh\");\n  }\n\n  static checkTokenExpiry() {\n    var expire = false;\n    var token = this.getLoginToken();\n    var tokenArray = token.split(\".\");\n    var jwt = JSON.parse(atob(tokenArray[1]));\n    if (jwt && jwt.exp && Number.isFinite(jwt.exp)) {\n      expire = jwt.exp * 1000;\n    } else {\n      expire = false;\n    }\n\n    if (!expire) {\n      return false;\n    }\n\n    return Date.now() > expire;\n  }\n}\n\nexport default AuthHandler;\n"]},"metadata":{},"sourceType":"module"}